@page "/items"

<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Items</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddItemDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>

<table class="table">
    <thead>
        <tr>
            <th>ItemName</th>
            <th>Quantity</th>
            <th>Date</th>
            <th>Actions</th>
        </tr>
    </thead>
 
    <tbody>     
        @foreach (var ItemModel in _items)
            {
                <tr>
                    <td>@ItemModel.ItemName</td>
                    <td>@ItemModel.Quantity</td>                  
                    <td>@ItemModel.Date</td>
                <td>
                    <button  class="btn btn-outline-secondary" type="button"
                        @onclick="()=>OpenEditItemDialog(ItemModel)">
                        <span class="oi oi-pencil" /> Edit
                    </button>
                    <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteItemDialog(ItemModel)">
                        <span class="oi oi-delete" /> Delete
                    </button>
                </td>
            </tr>
            }
    </tbody>
</table>

@if (_showEditItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditItemDialogClose" OkLabel="@_dialogOkLabel">
    <div class="form-floating">
            <input id="taskName" type="text" class="form-control" @bind="_itemModel.ItemName" placeholder="Task Name" />
            <label for="taskName">Item Name</label>
           
    </div>
        <div class="form-floating">
            <input id="taskqty" type="text" class="form-control" @bind="_itemModel.Quantity" placeholder="Task Quantity" />
            <label for="taskqty">Quantity</label>
        </div>
    <div class="form-floating">
        <label for="dueDate">Date</label>
        <input id="date" type="date" min='@DateTime.Now.ToString("yyyy-MM-dd")'
            value='@_itemModel.Date.ToString("yyyy-MM-dd")' @onchange="updateDate" class="form-control text-left"
            placeholder="Date">
    </div>
        @if (!string.IsNullOrEmpty(_editItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
        }
    </ModalDialog>
}

@if (_showDeleteItemDialog)
{
    <ModalDialog Title="Delete Todo" OnClose="@OnDeleteItemDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteItem.ItemName</strong> task?</p>
    @if (!string.IsNullOrEmpty(_deleteItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteItemErrorMessage" />
        }
        </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditItemDialog { get; set; }
    private bool _showDeleteItemDialog { get; set; }
    private List<ItemModel> _items { get; set; }
    private ItemModel _deleteItem { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editItemErrorMessage { get; set; }
    private string _deleteItemErrorMessage { get; set; }
    private ItemModel _itemModel { get; set; }

    protected override void OnInitialized()
    {
        _items = ItemService.View(_globalState.CurrentUser.Id);
    }

    private void OpenAddItemDialog()
    {
        _dialogTitle = "Add Items";
        _dialogOkLabel = "Add";
        _itemModel = new ItemModel();
        _itemModel.Id = Guid.Empty;
        _showEditItemDialog = true;
    }
    private void OpenEditItemDialog(ItemModel editTodo)
    {
        _dialogTitle = "Edit Items";
        _dialogOkLabel = "Save";
        _itemModel = editTodo;
        _showEditItemDialog = true;
    }
    private void OpenDeleteItemDialog(ItemModel ItemModel)
    {
        _deleteItem = ItemModel;
        _showDeleteItemDialog = true;
    }

    private void updateDate(ChangeEventArgs e)
    {
        _itemModel.Date = DateTime.Parse(e.Value.ToString());
    }
    private void OnEditItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditItemDialog = false;
        }
        else
        {
            try
            {
                _editItemErrorMessage = "";
                if (_itemModel.Id == Guid.Empty)
                {
                    _items = ItemService.Insert(_globalState.CurrentUser.Id, _itemModel.ItemName, _itemModel.Quantity, _itemModel.Date);
                  
                }
                else
                {
                    _items = ItemService.Update(_globalState.CurrentUser.Id, _itemModel.Id, _itemModel.ItemName, _itemModel.Quantity, _itemModel.Date);
                }
                _showEditItemDialog = false;
            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;
            }
        }
    }
    private void OnDeleteItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteItemDialog = false;
            _deleteItem = null;
        }
        else
        {
            try
            {
                _deleteItemErrorMessage = "";
                _items = ItemService.Delete(_globalState.CurrentUser.Id, _deleteItem.Id);
                _showDeleteItemDialog = false;
                _deleteItem = null;
            }
            catch (Exception e)
            {
                _deleteItemErrorMessage = e.Message;
            }
        }
    }

}
